/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <math.h>

//==============================================================================
NewProjectAudioProcessor::NewProjectAudioProcessor()
{
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            xLP[i][j] = 0;
            yLP[i][j] = 0;
            xHP[i][j] = 0;
            yHP[i][j] = 0;
        }
    }
}

NewProjectAudioProcessor::~NewProjectAudioProcessor()
{
}

//==============================================================================
const String NewProjectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int NewProjectAudioProcessor::getNumParameters()
{
    return 0;
}

float NewProjectAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void NewProjectAudioProcessor::setParameter (int index, float newValue)
{
}

const String NewProjectAudioProcessor::getParameterName (int index)
{
    return String();
}

const String NewProjectAudioProcessor::getParameterText (int index)
{
    return String();
}

const String NewProjectAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String NewProjectAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool NewProjectAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool NewProjectAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool NewProjectAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool NewProjectAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

bool NewProjectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double NewProjectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int NewProjectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
    // so this should be at least 1, even if you're not really implementing programs.
}

int NewProjectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void NewProjectAudioProcessor::setCurrentProgram (int index)
{
}

const String NewProjectAudioProcessor::getProgramName (int index)
{
    return String();
}

void NewProjectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void NewProjectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void NewProjectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

double NewProjectAudioProcessor::dBToAmplitude(double dB){
    return pow(10, (dB/20));
}

float NewProjectAudioProcessor::LowPassFilter(float buffer, int channel){
    double Fs = getSampleRate();
    double f0 = custom.get_LPFreqValue();
    double Q = custom.get_LPQValue();
    double K = tan(M_PI * (f0/Fs));
    double norm = 1 / (1 + K / Q + K * K);
    double a0 = K * K * norm;
    double a1 = 2 * a0;
    double a2 = a0;
    double b1 = 2 * (K * K -1) * norm;
    double b2 = (1 -K / Q + K * K) * norm;
    
    
        xLP[channel][2] = xLP[channel][1];
        xLP[channel][1] = xLP[channel][0];
        xLP[channel][0] = buffer;
        yLP[channel][2] = yLP[channel][1];
        yLP[channel][1] = yLP[channel][0];
        
        buffer = (a0*xLP[channel][0] + a1*xLP[channel][1] + a2*xLP[channel][2] - b1*yLP[channel][1] - b2*yLP[channel][2]);
        
    yLP[channel][0] = buffer;
    
    return buffer;
    
}

float NewProjectAudioProcessor::HighPassFilter(float buffer, int channel){
    double Fs = getSampleRate();
    double f0 = custom.get_HPFreqValue();
    double Q = custom.get_HPQValue();
    double K = tan(M_PI * (f0/Fs));
    double norm = 1 / (1 + K/ Q + K * K);
    double a0 = 1 * norm;
    double a1 = -2 * a0;
    double a2 = a0;
    double b1 = 2 * (K * K - 1) * norm;
    double b2 = (1 - K / Q + K * K) * norm;
    
    xHP[channel][2] = xHP[channel][1];
    xHP[channel][1] = xHP[channel][0];
    xHP[channel][0] = buffer;
    yHP[channel][2] = yHP[channel][1];
    yHP[channel][1] = yHP[channel][0];
    
    buffer = (a0*xHP[channel][0] + a1*xHP[channel][1] + a2*xHP[channel][2] - b1*yHP[channel][1] - b2*yHP[channel][2]);

    yHP[channel][0] = buffer;
    
    return buffer;
    
}


void NewProjectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
        
        // ..do something to the data...
        
        //Highpass Filter
        if (custom.get_HPEnableBool() == true) {
            for (int i = 0; i < numSamples; i++) {
                channelData[i] = HighPassFilter(channelData[i], channel);
            }
        }
        //Lowpass Filter
        if (custom.get_LPEnableBool() == true) {
            for (int i = 0; i < numSamples; i++) {
                channelData[i] = LowPassFilter(channelData[i], channel);
            }
        }
        //protect your fucking ears!
        for (int i = 0; i < numSamples; i++) {
            if (channelData[i] > 1) {
                channelData[i] = 1;
            }
        }

    }
}

//==============================================================================
bool NewProjectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* NewProjectAudioProcessor::createEditor()
{
    return new NewProjectAudioProcessorEditor (*this);
}

//==============================================================================
void NewProjectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void NewProjectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new NewProjectAudioProcessor();
}
