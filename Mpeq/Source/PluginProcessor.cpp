/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <math.h>


//==============================================================================
NewProjectAudioProcessor::NewProjectAudioProcessor()
{
    //Lowpass
    LP.set_Frequency(custom.get_LPFreqValue());
    LP.set_Q(custom.get_LPQValue());
    LP.calculateVariables();
    
    //Highpass
    HP.set_Frequency(custom.get_HPFreqValue());
    HP.set_Q(custom.get_HPQValue());
    HP.calculateVariables();
    
    //LF
    LFPeak.set_Frequency(custom.get_LFFreqValue());
    LFPeak.set_Q(custom.get_LFQValue());
    LFPeak.set_Gain(custom.get_LFGainValue());
    LFPeak.set_PositiveNegative(custom.get_LFPosBool());
    LFPeak.calculateVariables();
    LFShelf.set_Frequency(custom.get_LFFreqValue());
    LFShelf.set_Q(custom.get_LFQValue());
    LFShelf.set_Gain(custom.get_LFGainValue());
    LFShelf.set_PositiveNegative(custom.get_LFPosBool());
    LFShelf.calculateVariables();
    LFNotch.set_Frequency(custom.get_LFFreqValue());
    LFNotch.set_Q(custom.get_LFQValue());
    LFNotch.calculateVariables();
    
    //LMF
    LMFPeak.set_Frequency(custom.get_LMFFreqValue());
    LMFPeak.set_Q(custom.get_LMFQValue());
    LMFPeak.set_Gain(custom.get_LMFGainValue());
    LMFPeak.set_PositiveNegative(custom.get_LMFPosBool());
    LMFPeak.calculateVariables();
    LMFShelf.set_Frequency(custom.get_LMFFreqValue());
    LMFShelf.set_Q(custom.get_LMFQValue());
    LMFShelf.set_Gain(custom.get_LMFGainValue());
    LMFShelf.set_PositiveNegative(custom.get_LMFPosBool());
    LMFShelf.calculateVariables();
    LMFNotch.set_Frequency(custom.get_LMFFreqValue());
    LMFNotch.set_Q(custom.get_LMFQValue());
    LMFNotch.calculateVariables();
    
    //HMF
    HMFPeak.set_Frequency(custom.get_HMFFreqValue());
    HMFPeak.set_Q(custom.get_HMFQValue());
    HMFPeak.set_Gain(custom.get_HMFGainValue());
    HMFPeak.set_PositiveNegative(custom.get_HMFPosBool());
    HMFPeak.calculateVariables();
    HMFShelf.set_Frequency(custom.get_HMFFreqValue());
    HMFShelf.set_Q(custom.get_HMFQValue());
    HMFShelf.set_Gain(custom.get_HMFGainValue());
    HMFShelf.set_PositiveNegative(custom.get_HMFPosBool());
    HMFShelf.calculateVariables();
    HMFNotch.set_Frequency(custom.get_HMFFreqValue());
    HMFNotch.set_Q(custom.get_HMFQValue());
    HMFNotch.calculateVariables();
    
    //HF
    HFPeak.set_Frequency(custom.get_HFFreqValue());
    HFPeak.set_Q(custom.get_HFQValue());
    HFPeak.set_Gain(custom.get_HFGainValue());
    HFPeak.set_PositiveNegative(custom.get_HFPosBool());
    HFPeak.calculateVariables();
    HFShelf.set_Frequency(custom.get_HFFreqValue());
    HFShelf.set_Q(custom.get_HFQValue());
    HFShelf.set_Gain(custom.get_HFGainValue());
    HFShelf.set_PositiveNegative(custom.get_HFPosBool());
    HFShelf.calculateVariables();
    HFNotch.set_Frequency(custom.get_HFFreqValue());
    HFNotch.set_Q(custom.get_HFQValue());
    HFNotch.calculateVariables();
    
}


NewProjectAudioProcessor::~NewProjectAudioProcessor()
{
}

//==============================================================================
const String NewProjectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}


const String NewProjectAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String NewProjectAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool NewProjectAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool NewProjectAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool NewProjectAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool NewProjectAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

bool NewProjectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double NewProjectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int NewProjectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
    // so this should be at least 1, even if you're not really implementing programs.
}

int NewProjectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void NewProjectAudioProcessor::setCurrentProgram (int index)
{
}

const String NewProjectAudioProcessor::getProgramName (int index)
{
    return String();
}

void NewProjectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void NewProjectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void NewProjectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}


void NewProjectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    
    //Set Samplerate for every filter.
    LP.set_Samplerate(getSampleRate());
    HP.set_Samplerate(getSampleRate());
    LFPeak.set_Samplerate(getSampleRate());
    LMFPeak.set_Samplerate(getSampleRate());
    HMFPeak.set_Samplerate(getSampleRate());
    HFPeak.set_Samplerate(getSampleRate());
    LFShelf.set_Samplerate(getSampleRate());
    LMFShelf.set_Samplerate(getSampleRate());
    HMFShelf.set_Samplerate(getSampleRate());
    HFShelf.set_Samplerate(getSampleRate());
    LFNotch.set_Samplerate(getSampleRate());
    LMFNotch.set_Samplerate(getSampleRate());
    HMFNotch.set_Samplerate(getSampleRate());
    HFNotch.set_Samplerate(getSampleRate());
    
    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
                
        //Highpass Filter
        for (int i = 0; i < numSamples; i++) {
            if (custom.get_HPEnableBool() == true) {
                if (custom.sliderDragged[16] == true || custom.sliderDragged[17] == true) {
                    HP.set_Frequency(custom.get_HPFreqValue());
                    HP.set_Q(custom.get_HPQValue());
                    HP.calculateVariables();
                    channelData[i] = HP.processSample(channelData[i], channel);
                } else {
                    channelData[i] = HP.processSample(channelData[i], channel);
                }
            }
        }
        //Lowpass Filter
        for (int i = 0; i < numSamples; i++) {
            if (custom.get_LPEnableBool() == true) {
                if (custom.sliderDragged[18] == true || custom.sliderDragged[19] == true) {
                    LP.set_Frequency(custom.get_LPFreqValue());
                    LP.set_Q(custom.get_LPQValue());
                    LP.calculateVariables();
                    channelData[i] = LP.processSample(channelData[i], channel);
                } else {
                    channelData[i] = LP.processSample(channelData[i], channel);
                }
            }
        }
        
        for (int i = 0; i < numSamples; i++){
            //LFFilters
            if (custom.get_LFEnableBool() == true) {
                if(custom.get_LFPNBool() == false){
                    if (custom.sliderDragged[0] == true || custom.sliderDragged[2] == true || custom.sliderDragged[3] == true)
                    {
                        LFPeak.set_Frequency(custom.get_LFFreqValue());
                        LFPeak.set_Q(custom.get_LFQValue());
                        LFPeak.set_Gain(custom.get_LFGainValue());
                        LFPeak.set_PositiveNegative(custom.get_LFPosBool());
                        LFPeak.calculateVariables();
                        LFShelf.set_Frequency(custom.get_LFFreqValue());
                        LFShelf.set_Q(custom.get_LFQValue());
                        LFShelf.set_Gain(custom.get_LFGainValue());
                        LFShelf.set_PositiveNegative(custom.get_LFPosBool());
                        LFShelf.calculateVariables();
                        LFNotch.set_Frequency(custom.get_LFFreqValue());
                        LFNotch.set_Q(custom.get_LFQValue());
                        LFNotch.calculateVariables();
                        parallelChain1 = (LFPeak.processSample(channelData[i], channel)*(1 - custom.get_LFShapeValue()))+(LFShelf.processSample(channelData[i], channel)*custom.get_LFShapeValue());
                    } else {
                        parallelChain1 = (LFPeak.processSample(channelData[i], channel)*(1 - custom.get_LFShapeValue()))+(LFShelf.processSample(channelData[i], channel)*custom.get_LFShapeValue());
                    }
                } else {
                    if (custom.sliderDragged[0] == true || custom.sliderDragged[2] == true || custom.sliderDragged[3] == true)
                    {
                        LFPeak.set_Frequency(custom.get_LFFreqValue());
                        LFPeak.set_Q(custom.get_LFQValue());
                        LFPeak.set_Gain(custom.get_LFGainValue());
                        LFPeak.set_PositiveNegative(custom.get_LFPosBool());
                        LFPeak.calculateVariables();
                        LFShelf.set_Frequency(custom.get_LFFreqValue());
                        LFShelf.set_Q(custom.get_LFQValue());
                        LFShelf.set_Gain(custom.get_LFGainValue());
                        LFShelf.set_PositiveNegative(custom.get_LFPosBool());
                        LFShelf.calculateVariables();
                        LFNotch.set_Frequency(custom.get_LFFreqValue());
                        LFNotch.set_Q(custom.get_LFQValue());
                        LFNotch.calculateVariables();
                        parallelChain1 = LFNotch.processSample(channelData[i], channel);
                    } else {
                        parallelChain1 = LFNotch.processSample(channelData[i], channel);
                    }
                }
            } else {
                parallelChain1 = channelData[i];
            }
            //LMFFilters
            if (custom.get_LMFEnableBool() == true) {
                if (custom.get_LMFPNBool() == false) {
                    if (custom.sliderDragged[4] == true || custom.sliderDragged[6] == true || custom.sliderDragged[7] == true) {
                        LMFPeak.set_Frequency(custom.get_LMFFreqValue());
                        LMFPeak.set_Q(custom.get_LMFQValue());
                        LMFPeak.set_Gain(custom.get_LMFGainValue());
                        LMFPeak.set_PositiveNegative(custom.get_LMFPosBool());
                        LMFPeak.calculateVariables();
                        LMFShelf.set_Frequency(custom.get_LMFFreqValue());
                        LMFShelf.set_Q(custom.get_LMFQValue());
                        LMFShelf.set_Gain(custom.get_LMFGainValue());
                        LMFShelf.set_PositiveNegative(custom.get_LMFPosBool());
                        LMFShelf.calculateVariables();
                        LMFNotch.set_Frequency(custom.get_LMFFreqValue());
                        LMFNotch.set_Q(custom.get_LMFQValue());
                        LMFNotch.calculateVariables();
                        parallelChain2 = (LMFPeak.processSample(channelData[i], channel)*(1 - custom.get_LMFShapeValue()))+(LMFShelf.processSample(channelData[i], channel)*custom.get_LMFShapeValue());
                    } else {
                        parallelChain2 = (LMFPeak.processSample(channelData[i], channel)*(1 - custom.get_LMFShapeValue()))+(LMFShelf.processSample(channelData[i], channel)*custom.get_LMFShapeValue());
                    }
                } else {
                    if (custom.sliderDragged[4] == true || custom.sliderDragged[6] == true || custom.sliderDragged[7] == true) {
                        LMFPeak.set_Frequency(custom.get_LMFFreqValue());
                        LMFPeak.set_Q(custom.get_LMFQValue());
                        LMFPeak.set_Gain(custom.get_LMFGainValue());
                        LMFPeak.set_PositiveNegative(custom.get_LMFPosBool());
                        LMFPeak.calculateVariables();
                        LMFShelf.set_Frequency(custom.get_LMFFreqValue());
                        LMFShelf.set_Q(custom.get_LMFQValue());
                        LMFShelf.set_Gain(custom.get_LMFGainValue());
                        LMFShelf.set_PositiveNegative(custom.get_LMFPosBool());
                        LMFShelf.calculateVariables();
                        LMFNotch.set_Frequency(custom.get_LMFFreqValue());
                        LMFNotch.set_Q(custom.get_LMFQValue());
                        LMFNotch.calculateVariables();
                        parallelChain2 = LMFNotch.processSample(channelData[i], channel);
                    } else {
                        parallelChain2 = LMFNotch.processSample(channelData[i], channel);
                    }
                }
                
            } else {
                parallelChain2 = channelData[i];
            }
            
            //HMFFilters
            if (custom.get_HMFEnableBool() == true) {
                if (custom.get_HMFPNBool() == false){
                    if (custom.sliderDragged[8] == true || custom.sliderDragged[10] == true || custom.sliderDragged[11] == true) {
                        HMFPeak.set_Frequency(custom.get_HMFFreqValue());
                        HMFPeak.set_Q(custom.get_HMFQValue());
                        HMFPeak.set_Gain(custom.get_HMFGainValue());
                        HMFPeak.set_PositiveNegative(custom.get_HMFPosBool());
                        HMFPeak.calculateVariables();
                        HMFShelf.set_Frequency(custom.get_HMFFreqValue());
                        HMFShelf.set_Q(custom.get_HMFQValue());
                        HMFShelf.set_Gain(custom.get_HMFGainValue());
                        HMFShelf.set_PositiveNegative(custom.get_HMFPosBool());
                        HMFShelf.calculateVariables();
                        HMFNotch.set_Frequency(custom.get_HMFFreqValue());
                        HMFNotch.set_Q(custom.get_HMFQValue());
                        HMFNotch.calculateVariables();
                        parallelChain1 = (HMFPeak.processSample(parallelChain1, channel)*(1-custom.get_HMFShapeValue()))+(HMFShelf.processSample(parallelChain1, channel)*custom.get_HMFShapeValue());
                    } else {
                        parallelChain1 = (HMFPeak.processSample(parallelChain1, channel)*(1-custom.get_HMFShapeValue()))+(HMFShelf.processSample(parallelChain1, channel)*custom.get_HMFShapeValue());
                    }
                } else {
                    if (custom.sliderDragged[8] == true || custom.sliderDragged[10] == true || custom.sliderDragged[11] == true) {
                        HMFPeak.set_Frequency(custom.get_HMFFreqValue());
                        HMFPeak.set_Q(custom.get_HMFQValue());
                        HMFPeak.set_Gain(custom.get_HMFGainValue());
                        HMFPeak.set_PositiveNegative(custom.get_HMFPosBool());
                        HMFPeak.calculateVariables();
                        HMFShelf.set_Frequency(custom.get_HMFFreqValue());
                        HMFShelf.set_Q(custom.get_HMFQValue());
                        HMFShelf.set_Gain(custom.get_HMFGainValue());
                        HMFShelf.set_PositiveNegative(custom.get_HMFPosBool());
                        HMFShelf.calculateVariables();
                        HMFNotch.set_Frequency(custom.get_HMFFreqValue());
                        HMFNotch.set_Q(custom.get_HMFQValue());
                        HMFNotch.calculateVariables();
                        parallelChain1 = HMFNotch.processSample(parallelChain1, channel);
                    } else {
                        parallelChain1 = HMFNotch.processSample(parallelChain1, channel);
                    }
                }
            } else {
                parallelChain1 = parallelChain1;
            }
            
            //HFFilters
            if (custom.get_HFEnableBool() == true) {
                if (custom.get_HFPNBool() == false){
                    if (custom.sliderDragged[12] == true || custom.sliderDragged[14] == true || custom.sliderDragged[15] == true) {
                        HFPeak.set_Frequency(custom.get_HFFreqValue());
                        HFPeak.set_Q(custom.get_HFQValue());
                        HFPeak.set_Gain(custom.get_HFGainValue());
                        HFPeak.set_PositiveNegative(custom.get_HFPosBool());
                        HFPeak.calculateVariables();
                        HFShelf.set_Frequency(custom.get_HFFreqValue());
                        HFShelf.set_Q(custom.get_HFQValue());
                        HFShelf.set_Gain(custom.get_HFGainValue());
                        HFShelf.set_PositiveNegative(custom.get_HFPosBool());
                        HFShelf.calculateVariables();
                        HFNotch.set_Frequency(custom.get_HFFreqValue());
                        HFNotch.set_Q(custom.get_HFQValue());
                        HFNotch.calculateVariables();
                        parallelChain2 = (HFPeak.processSample(parallelChain2, channel)*(1 - custom.get_HFShapeValue())) + (HFShelf.processSample(parallelChain2, channel)*custom.get_HFShapeValue());
                    } else {
                        parallelChain2 = (HFPeak.processSample(parallelChain2, channel)*(1 - custom.get_HFShapeValue())) + (HFShelf.processSample(parallelChain2, channel)*custom.get_HFShapeValue());
                    }
                } else {
                    if (custom.sliderDragged[12] == true || custom.sliderDragged[14] == true || custom.sliderDragged[15] == true) {
                        HFPeak.set_Frequency(custom.get_HFFreqValue());
                        HFPeak.set_Q(custom.get_HFQValue());
                        HFPeak.set_Gain(custom.get_HFGainValue());
                        HFPeak.set_PositiveNegative(custom.get_HFPosBool());
                        HFPeak.calculateVariables();
                        HFShelf.set_Frequency(custom.get_HFFreqValue());
                        HFShelf.set_Q(custom.get_HFQValue());
                        HFShelf.set_Gain(custom.get_HFGainValue());
                        HFShelf.set_PositiveNegative(custom.get_HFPosBool());
                        HFShelf.calculateVariables();
                        HFNotch.set_Frequency(custom.get_HFFreqValue());
                        HFNotch.set_Q(custom.get_HFQValue());
                        HFNotch.calculateVariables();
                        parallelChain2 = HFNotch.processSample(parallelChain2, channel);
                    } else {
                        parallelChain2 = HFNotch.processSample(parallelChain2, channel);
                    }
                }
            } else {
                parallelChain1 = parallelChain1;
            }
            
            channelData[i] = (parallelChain1+parallelChain2)*0.5;
        }
        
        //protect your fucking ears!
        for (int i = 0; i < numSamples; i++) {
            if (channelData[i] > 1) {
                channelData[i] = 1;
            }
        }

    }
}

//==============================================================================
bool NewProjectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* NewProjectAudioProcessor::createEditor()
{
    return new NewProjectAudioProcessorEditor (*this);
}

int NewProjectAudioProcessor::getNumParameters(){
    return 34;
}
const String NewProjectAudioProcessor::getParameterName (int parameterIndex){
    switch (parameterIndex) {
        case LFGain:        return "LFGain"; break;
            case LFShape:       return "LFShape"; break;
            case LFFreq:        return "LFFrequency "; break;
            case LFQ:           return "LFQ"; break;
            case LFPos:         return "LFPositive/Negative"; break;
            case LFPN:          return "LFPeak/Notch"; break;
            case LFEnable:      return "LFEnable"; break;
            case LMFGain:       return "LMFGain"; break;
            case LMFShape:      return "LMFShape"; break;
            case LMFFreq:       return "LMFFrequency "; break;
            case LMFQ:          return "LMFQ"; break;
            case LMFPos:        return "LMFPositive/Negative"; break;
            case LMFPN:         return "LMFPeak/Notch"; break;
            case LMFEnable:     return "LMFEnable"; break;
            case HMFGain:       return "HMFGain"; break;
            case HMFShape:      return "HMFShape"; break;
            case HMFFreq:       return "HMFFrequency "; break;
            case HMFQ:          return "HMFQ"; break;
            case HMFPos:        return "HMFPositive/Negative"; break;
            case HMFPN:         return "HMFPeak/Notch"; break;
            case HMFEnable:     return "HMFEnable"; break;
            case HFGain:        return "HFGain"; break;
            case HFShape:       return "HFShape"; break;
            case HFFreq:        return "HFFrequency "; break;
            case HFQ:           return "HFQ"; break;
            case HFPos:         return "HFPositive/Negative"; break;
            case HFPN:          return "HFPeak/Notch"; break;
            case HFEnable:      return "HFEnable"; break;
            case HPFreq:        return "HPFrequency "; break;
            case HPQ:           return "HPQ"; break;
            case HPEnable:      return "HPEnable"; break;
            case LPFreq:        return "LPFrequency "; break;
            case LPQ:           return "LPQ"; break;
            case LPEnable:      return "LPEnable"; break;
            default:            return ""; break;
    }
}
float NewProjectAudioProcessor::getParameter (int parameterIndex){
    switch (parameterIndex) {
            case LFGain:        return scaleLinearToHost(custom.get_LFGainValue(), 0, 10); break;
            case LFShape:       return custom.get_LFShapeValue(); break;
            case LFFreq:        return scaleLogToHost(custom.get_LFFreqValue(), 20, 340); break;
            case LFQ:           return scaleLinearToHost(custom.get_LFQValue(), 0.5, 3.f); break;
            case LFPos:         return scaleBoolToHost(custom.get_LFPosBool()); break;
            case LFPN:          return scaleBoolToHost(custom.get_LFPNBool()); break;
            case LFEnable:      return scaleBoolToHost(custom.get_LFEnableBool()); break;
            case LMFGain:       return scaleLinearToHost(custom.get_LMFGainValue(), 0, 10); break;
            case LMFShape:      return custom.get_LMFShapeValue(); break;
            case LMFFreq:       return scaleLogToHost(custom.get_LMFFreqValue(), 90, 1400); break;
            case LMFQ:          return scaleLinearToHost(custom.get_LMFQValue(), 0.5, 3.f); break;
            case LMFPos:        return scaleBoolToHost(custom.get_LMFPosBool()); break;
            case LMFPN:         return scaleBoolToHost(custom.get_LMFPNBool()); break;
            case LMFEnable:     return scaleBoolToHost(custom.get_LMFEnableBool()); break;
            case HMFGain:       return scaleLinearToHost(custom.get_HMFGainValue(), 0, 10); break;
            case HMFShape:      return custom.get_HMFShapeValue(); break;
            case HMFFreq:       return scaleLogToHost(custom.get_HMFFreqValue(), 400, 6000); break;
            case HMFQ:          return scaleLinearToHost(custom.get_HMFQValue(), 0.5, 3.f); break;
            case HMFPos:        return scaleBoolToHost(custom.get_HMFPosBool()); break;
            case HMFPN:         return scaleBoolToHost(custom.get_HMFPNBool()); break;
            case HMFEnable:     return scaleBoolToHost(custom.get_HMFEnableBool()); break;
            case HFGain:        return scaleLinearToHost(custom.get_HFGainValue(), 0, 10); break;
            case HFShape:       return custom.get_HFShapeValue(); break;
            case HFFreq:        return scaleLogToHost(custom.get_HFFreqValue(), 1500, 22000); break;
            case HFQ:           return scaleLinearToHost(custom.get_HFQValue(), 0.5, 3.f); break;
            case HFPos:         return scaleBoolToHost(custom.get_HFPosBool()); break;
            case HFPN:          return scaleBoolToHost(custom.get_HFPNBool()); break;
            case HFEnable:      return scaleBoolToHost(custom.get_HFEnableBool()); break;
            case HPFreq:        return scaleLogToHost(custom.get_HPFreqValue(), 20, 340); break;
            case HPQ:           return scaleLinearToHost(custom.get_HPQValue(), 0.5, 3.f); break;
            case HPEnable:      return scaleBoolToHost(custom.get_HPEnableBool()); break;
            case LPFreq:        return scaleLogToHost(custom.get_LPFreqValue(), 1500, 22000); break;
            case LPQ:           return scaleLinearToHost(custom.get_LPQValue(), 0.5, 3.f); break;
            case LPEnable:      return scaleBoolToHost(custom.get_LPEnableBool()); break;
        default:            return 0.f; break;
    }
    
}
void NewProjectAudioProcessor::setParameter (int parameterIndex, float newValue){
    switch (parameterIndex) {
        case LFGain:        custom.set_LFGainValue(scaleLinearFromHost(newValue, 0, 10)); break;
        case LFShape:       custom.set_LFShapeValue(newValue); break;
        case LFFreq:        custom.set_LFFreqValue(scaleLogFromHost(newValue, 20, 340)); break;
        case LFQ:           custom.set_LFQValue(scaleLinearFromHost(newValue, 0.5, 3.f)); break;
        case LFPos:         custom.set_LFPosBool(scaleBoolFromHost(newValue)); break;
        case LFPN:          custom.set_LFPNBool(scaleBoolFromHost(newValue)); break;
        case LFEnable:      custom.set_LFEnableBool(scaleBoolFromHost(newValue)); break;
        case LMFGain:       custom.set_LMFGainValue(scaleLinearFromHost(newValue, 0, 10)); break;
        case LMFShape:      custom.set_LMFShapeValue(newValue); break;
        case LMFFreq:       custom.set_LMFFreqValue(scaleLogFromHost(newValue, 90, 1400)); break;
        case LMFQ:          custom.set_LMFQValue(scaleLinearFromHost(newValue, 0.5, 3.f)); break;
        case LMFPos:        custom.set_LMFPosBool(scaleBoolFromHost(newValue)); break;
        case LMFPN:         custom.set_LMFPNBool(scaleBoolFromHost(newValue)); break;
        case LMFEnable:     custom.set_LMFEnableBool(scaleBoolFromHost(newValue)); break;
        case HMFGain:       custom.set_HMFGainValue(scaleLinearFromHost(newValue, 0, 10)); break;
        case HMFShape:      custom.set_HMFShapeValue(newValue); break;
        case HMFFreq:       custom.set_HMFFreqValue(scaleLogFromHost(newValue, 400, 6000)); break;
        case HMFQ:          custom.set_HMFQValue(scaleLinearFromHost(newValue, 0.5, 3.f)); break;
        case HMFPos:        custom.set_HMFPosBool(scaleBoolFromHost(newValue)); break;
        case HMFPN:         custom.set_HMFPNBool(scaleBoolFromHost(newValue)); break;
        case HMFEnable:     custom.set_HMFEnableBool(scaleBoolFromHost(newValue)); break;
        case HFGain:        custom.set_HFGainValue(scaleLinearFromHost(newValue, 0, 10)); break;
        case HFShape:       custom.set_HFShapeValue(newValue); break;
        case HFFreq:        custom.set_HFFreqValue(scaleLogFromHost(newValue, 1500, 22000)); break;
        case HFQ:           custom.set_HFQValue(scaleLinearFromHost(newValue, 0.5, 3.f)); break;
        case HFPos:         custom.set_HFPosBool(scaleBoolFromHost(newValue)); break;
        case HFPN:          custom.set_HFPNBool(scaleBoolFromHost(newValue)); break;
        case HFEnable:      custom.set_HFEnableBool(scaleBoolFromHost(newValue)); break;
        case HPFreq:        custom.set_HPFreqValue(scaleLogFromHost(newValue, 20, 340)); break;
        case HPQ:           custom.set_HPQValue(scaleLinearFromHost(newValue, 0.5, 3.f)); break;
        case HPEnable:      custom.set_HPEnableBool(scaleBoolFromHost(newValue)); break;
        case LPFreq:        custom.set_LPFreqValue(scaleLogFromHost(newValue, 1500, 22000)); break;
        case LPQ:           custom.set_LPQValue(scaleLinearFromHost(newValue, 0.5, 3.f)); break;
        case LPEnable:      custom.set_LPEnableBool(scaleBoolFromHost(newValue)); break;
        default:
            break;
    }
}

const String NewProjectAudioProcessor::getParameterText (int index){
    return String (getParameter(index));
}
//==============================================================================
void NewProjectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    XmlElement xml ("MYPLUGINSETTINGS");
    xml.setAttribute("LFGain", custom.get_LFGainValue());
    xml.setAttribute("LFShape", custom.get_LFShapeValue());
    xml.setAttribute("LFFreq", custom.get_LFFreqValue());
    xml.setAttribute("LFQ", custom.get_LFQValue());
    xml.setAttribute("LMFGain", custom.get_LMFGainValue());
    xml.setAttribute("LMFShape", custom.get_LMFShapeValue());
    xml.setAttribute("LMFFreq", custom.get_LMFFreqValue());
    xml.setAttribute("LMFQ", custom.get_LMFQValue());
    xml.setAttribute("HMFGain", custom.get_HMFGainValue());
    xml.setAttribute("HMFShape", custom.get_HMFShapeValue());
    xml.setAttribute("HMFFreq", custom.get_HMFFreqValue());
    xml.setAttribute("HMFQ", custom.get_HMFQValue());
    xml.setAttribute("HFGain", custom.get_HFGainValue());
    xml.setAttribute("HFShape", custom.get_HFShapeValue());
    xml.setAttribute("HFFreq", custom.get_HFFreqValue());
    xml.setAttribute("HFQ", custom.get_HFQValue());
    xml.setAttribute("HPFreq", custom.get_HPFreqValue());
    xml.setAttribute("HPQ", custom.get_HPQValue());
    xml.setAttribute("LPFreq", custom.get_LPFreqValue());
    xml.setAttribute("LPQ", custom.get_LPQValue());
    xml.setAttribute("LFPos", custom.get_LFPosBool());
    xml.setAttribute("LFPN", custom.get_LFPNBool());
    xml.setAttribute("LFEnable", custom.get_LFEnableBool());
    xml.setAttribute("LMFPos", custom.get_LMFPosBool());
    xml.setAttribute("LMFPN", custom.get_LMFPNBool());
    xml.setAttribute("LMFEnable", custom.get_LMFEnableBool());
    xml.setAttribute("HMFPos", custom.get_HMFPosBool());
    xml.setAttribute("HMFPN", custom.get_HMFPNBool());
    xml.setAttribute("HMFEnable", custom.get_HMFEnableBool());
    xml.setAttribute("HFPos", custom.get_HFPosBool());
    xml.setAttribute("HFPN", custom.get_HFPNBool());
    xml.setAttribute("HFEnable", custom.get_HFEnableBool());
    xml.setAttribute("HPEnable", custom.get_HPEnableBool());
    xml.setAttribute("LPEnable", custom.get_LPEnableBool());
    
    copyXmlToBinary (xml, destData);
}

void NewProjectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));
    
    if (xmlState != nullptr)
    {
        // make sure that it's actually our type of XML object..
        if (xmlState->hasTagName ("MYPLUGINSETTINGS"))
        {
            /* ok, now pull out our parameters..
            lastUIWidth  = xmlState->getIntAttribute ("uiWidth", lastUIWidth);
            lastUIHeight = xmlState->getIntAttribute ("uiHeight", lastUIHeight);
            
            gain  = (float) xmlState->getDoubleAttribute ("gain", gain);
            delay = (float) xmlState->getDoubleAttribute ("delay", delay);
             */
            custom.set_LFGainValue(xmlState->getDoubleAttribute("LFGain"));
            custom.set_LFShapeValue(xmlState->getDoubleAttribute("LFShape"));
            custom.set_LFFreqValue(xmlState->getDoubleAttribute("LFFreq"));
            custom.set_LFQValue(xmlState->getDoubleAttribute("LFQ"));
            custom.set_LMFGainValue(xmlState->getDoubleAttribute("LMFGain"));
            custom.set_LMFShapeValue(xmlState->getDoubleAttribute("LMFShape"));
            custom.set_LMFFreqValue(xmlState->getDoubleAttribute("LMFFreq"));
            custom.set_LMFQValue(xmlState->getDoubleAttribute("LMFQ"));
            custom.set_HMFGainValue(xmlState->getDoubleAttribute("HMFGain"));
            custom.set_HMFShapeValue(xmlState->getDoubleAttribute("HMFShape"));
            custom.set_HMFFreqValue(xmlState->getDoubleAttribute("HMFFreq"));
            custom.set_HMFQValue(xmlState->getDoubleAttribute("HMFQ"));
            custom.set_HFGainValue(xmlState->getDoubleAttribute("HFGain"));
            custom.set_HFShapeValue(xmlState->getDoubleAttribute("HFShape"));
            custom.set_HFFreqValue(xmlState->getDoubleAttribute("HFFreq"));
            custom.set_HFQValue(xmlState->getDoubleAttribute("HFQ"));
            custom.set_HPFreqValue(xmlState->getDoubleAttribute("HPFreq"));
            custom.set_HPQValue(xmlState->getDoubleAttribute("HPQ"));
            custom.set_LPFreqValue(xmlState->getDoubleAttribute("LPFreq"));
            custom.set_LPQValue(xmlState->getDoubleAttribute("LPQ"));
            custom.set_LFPosBool(xmlState->getBoolAttribute("LFPos"));
            custom.set_LFPNBool(xmlState->getBoolAttribute("LFPN"));
            custom.set_LFEnableBool(xmlState->getBoolAttribute("LFEnable"));
            custom.set_LMFPosBool(xmlState->getBoolAttribute("LMFPos"));
            custom.set_LMFPNBool(xmlState->getBoolAttribute("LMFPN"));
            custom.set_LMFEnableBool(xmlState->getBoolAttribute("LMFEnable"));
            custom.set_HMFPosBool(xmlState->getBoolAttribute("HMFPos"));
            custom.set_HMFPNBool(xmlState->getBoolAttribute("HMFPN"));
            custom.set_HMFEnableBool(xmlState->getBoolAttribute("HMFEnable"));
            custom.set_HFPosBool(xmlState->getBoolAttribute("HFPos"));
            custom.set_HFPNBool(xmlState->getBoolAttribute("HFPN"));
            custom.set_HFEnableBool(xmlState->getBoolAttribute("HFEnable"));
            custom.set_HPEnableBool(xmlState->getBoolAttribute("HPEnable"));
            custom.set_LPEnableBool(xmlState->getBoolAttribute("LPEnable"));
        }
    }
}


//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new NewProjectAudioProcessor();
}
